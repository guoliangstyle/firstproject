#include "stdafx.h"
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
using namespace std;
using namespace cv;

Mat image, g_shuangbian, g_xingtaixue, g_yuzhi;
int main()
{
	//*********************双边滤波**********************
	image = imread("C:/data/picture/good/1.jpg");
	bilateralFilter(image, g_shuangbian, 5, 20, 15);

	//********************形态学处理*********************
	Mat element = getStructuringElement(MORPH_RECT, Size(10, 10));
	morphologyEx(g_shuangbian, g_shuangbian, MORPH_OPEN, element);
	g_xingtaixue = g_shuangbian;

	//********************阈值处理**********************
	threshold(g_xingtaixue, g_yuzhi, 190, 255, 3);

	//********************最大面积***********************
	Mat gray;
	cvtColor(g_yuzhi, gray, CV_BGR2GRAY);
	threshold(gray, gray, 200, 255, THRESH_BINARY_INV);
	double largest_area = 0.0;
	double largest_contour_index = 0.0;
	Rect bounding_rect;
	vector<vector<Point>>contours;
	vector<Vec4i>hierarchy;
	findContours(gray, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE);
	for (int i = 0; i < contours.size(); i++)
	{
		double a = contourArea(contours[i], false);
		if (a > largest_area) {
			largest_area = a;
			cout << i << "area " << a << endl;
			largest_contour_index = i;
			bounding_rect = boundingRect(contours[i]);
		}
	}
	Scalar color(255, 255, 255);
	//drawContours(src, contours, largest_contour_index,color, CV_FILLED, 8, hierarchy);  //画出被测物体轮廓
	rectangle(g_yuzhi, bounding_rect, Scalar(0, 255, 0), 2, 8, 0);
	//==========================图像裁剪===========================

	Mat CroppedImage = image(bounding_rect);
	imwrite("最大面积.jpg", g_yuzhi);
	imwrite("C:/data/picture/good_seg/good1.jpg", CroppedImage);
    return 0;
}
